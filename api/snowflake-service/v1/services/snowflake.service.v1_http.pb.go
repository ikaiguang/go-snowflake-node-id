// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package snowflakeservicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/ikaiguang/go-snowflake-node-id/api/snowflake-service/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvSnowflakeWorkerExtendNodeId = "/snowflake.service.api.snowflakeservicev1.SrvSnowflakeWorker/ExtendNodeId"
const OperationSrvSnowflakeWorkerGetNodeId = "/snowflake.service.api.snowflakeservicev1.SrvSnowflakeWorker/GetNodeId"

type SrvSnowflakeWorkerHTTPServer interface {
	ExtendNodeId(context.Context, *resources.ExtendNodeIdReq) (*resources.Result, error)
	GetNodeId(context.Context, *resources.GetNodeIdReq) (*resources.SnowflakeWorker, error)
}

func RegisterSrvSnowflakeWorkerHTTPServer(s *http.Server, srv SrvSnowflakeWorkerHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/node-id/get", _SrvSnowflakeWorker_GetNodeId0_HTTP_Handler(srv))
	r.POST("/api/v1/node-id/extend", _SrvSnowflakeWorker_ExtendNodeId0_HTTP_Handler(srv))
}

func _SrvSnowflakeWorker_GetNodeId0_HTTP_Handler(srv SrvSnowflakeWorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.GetNodeIdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSnowflakeWorkerGetNodeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNodeId(ctx, req.(*resources.GetNodeIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SnowflakeWorker)
		return ctx.Result(200, reply)
	}
}

func _SrvSnowflakeWorker_ExtendNodeId0_HTTP_Handler(srv SrvSnowflakeWorkerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.ExtendNodeIdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSnowflakeWorkerExtendNodeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExtendNodeId(ctx, req.(*resources.ExtendNodeIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.Result)
		return ctx.Result(200, reply)
	}
}

type SrvSnowflakeWorkerHTTPClient interface {
	ExtendNodeId(ctx context.Context, req *resources.ExtendNodeIdReq, opts ...http.CallOption) (rsp *resources.Result, err error)
	GetNodeId(ctx context.Context, req *resources.GetNodeIdReq, opts ...http.CallOption) (rsp *resources.SnowflakeWorker, err error)
}

type SrvSnowflakeWorkerHTTPClientImpl struct {
	cc *http.Client
}

func NewSrvSnowflakeWorkerHTTPClient(client *http.Client) SrvSnowflakeWorkerHTTPClient {
	return &SrvSnowflakeWorkerHTTPClientImpl{client}
}

func (c *SrvSnowflakeWorkerHTTPClientImpl) ExtendNodeId(ctx context.Context, in *resources.ExtendNodeIdReq, opts ...http.CallOption) (*resources.Result, error) {
	var out resources.Result
	pattern := "/api/v1/node-id/extend"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSnowflakeWorkerExtendNodeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SrvSnowflakeWorkerHTTPClientImpl) GetNodeId(ctx context.Context, in *resources.GetNodeIdReq, opts ...http.CallOption) (*resources.SnowflakeWorker, error) {
	var out resources.SnowflakeWorker
	pattern := "/api/v1/node-id/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSnowflakeWorkerGetNodeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
