// Package datas
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package datas

import (
	"bytes"
	context "context"
	entities "github.com/ikaiguang/go-snowflake-node-id/internal/domain/snowflake/entity"
	repos "github.com/ikaiguang/go-snowflake-node-id/internal/domain/snowflake/repo"
	gormutil "github.com/ikaiguang/go-srv-kit/data/gorm"
	gorm "gorm.io/gorm"
	"strings"
	"time"
)

// SnowflakeWorkerRepo repo
type SnowflakeWorkerRepo struct {
	dbConn                *gorm.DB                 // *gorm.DB
	SnowflakeWorkerSchema entities.SnowflakeWorker // SnowflakeWorker
}

// NewSnowflakeWorkerRepo new data repo
func NewSnowflakeWorkerRepo(dbConn *gorm.DB) repos.SnowflakeWorkerRepo {
	return &SnowflakeWorkerRepo{
		dbConn: dbConn,
	}
}

// =============== 创建 ===============

// create insert one
func (s *SnowflakeWorkerRepo) create(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (err error) {
	err = dbConn.WithContext(ctx).Create(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Create insert one
func (s *SnowflakeWorkerRepo) Create(ctx context.Context, dataModel *entities.SnowflakeWorker) error {
	return s.create(ctx, s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *SnowflakeWorkerRepo) CreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) error {
	return s.create(ctx, dbConn, dataModel)
}

// existCreate exist create
func (s *SnowflakeWorkerRepo) existCreate(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	anotherModel = new(entities.SnowflakeWorker)
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			isNotFound = true
			err = nil
		}
		return
	}
	return
}

// ExistCreate exist create
func (s *SnowflakeWorkerRepo) ExistCreate(ctx context.Context, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.existCreate(ctx, s.dbConn, dataModel)
}

// ExistCreateWithDBConn exist create
func (s *SnowflakeWorkerRepo) ExistCreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.existCreate(ctx, dbConn, dataModel)
}

// createInBatches create many
func (s *SnowflakeWorkerRepo) createInBatches(ctx context.Context, dbConn *gorm.DB, dataModels []*entities.SnowflakeWorker, batchSize int) (err error) {
	err = dbConn.WithContext(ctx).CreateInBatches(dataModels, batchSize).Error
	if err != nil {
		return err
	}
	return
}

// CreateInBatches create many
func (s *SnowflakeWorkerRepo) CreateInBatches(ctx context.Context, dataModels []*entities.SnowflakeWorker, batchSize int) error {
	return s.createInBatches(ctx, s.dbConn, dataModels, batchSize)
}

// CreateInBatchesWithDBConn create many
func (s *SnowflakeWorkerRepo) CreateInBatchesWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*entities.SnowflakeWorker, batchSize int) error {
	return s.createInBatches(ctx, dbConn, dataModels, batchSize)
}

// =============== 更新 ===============

// update update
func (s *SnowflakeWorkerRepo) update(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		// Where("id = ?", dataModel.Id).
		Save(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Update update
func (s *SnowflakeWorkerRepo) Update(ctx context.Context, dataModel *entities.SnowflakeWorker) error {
	return s.update(ctx, s.dbConn, dataModel)
}

// UpdateWithDBConn update
func (s *SnowflakeWorkerRepo) UpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) error {
	return s.update(ctx, dbConn, dataModel)
}

// ExtendNodeID 续期
func (s *SnowflakeWorkerRepo) ExtendNodeID(ctx context.Context, dataModel *entities.SnowflakeWorker) (err error) {
	err = s.dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", dataModel.Id).
		UpdateColumn("instance_extend_time", time.Now()).Error
	if err != nil {
		return err
	}
	return
}

// existUpdate exist update
func (s *SnowflakeWorkerRepo) existUpdate(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	anotherModel = new(entities.SnowflakeWorker)
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", dataModel.Id).
		Where("id != ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			isNotFound = true
			err = nil
		}
		return
	}
	return
}

// ExistUpdate exist update
func (s *SnowflakeWorkerRepo) ExistUpdate(ctx context.Context, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.existUpdate(ctx, s.dbConn, dataModel)
}

// ExistUpdateWithDBConn exist update
func (s *SnowflakeWorkerRepo) ExistUpdateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (anotherModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.existUpdate(ctx, dbConn, dataModel)
}

// =============== query one : 查一个 ===============

// queryOneById query one by id
func (s *SnowflakeWorkerRepo) queryOneById(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	dataModel = new(entities.SnowflakeWorker)
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", id).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryOneById query one by id
func (s *SnowflakeWorkerRepo) QueryOneById(ctx context.Context, id interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.queryOneById(ctx, s.dbConn, id)
}

// QueryOneByIdWithDBConn query one by id
func (s *SnowflakeWorkerRepo) QueryOneByIdWithDBConn(ctx context.Context, dbConn *gorm.DB, id interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.queryOneById(ctx, dbConn, id)
}

// QueryOneByNodeUUID query one by id
func (s *SnowflakeWorkerRepo) QueryOneByNodeUUID(ctx context.Context, nodeUUID string) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	dataModel = new(entities.SnowflakeWorker)
	err = s.dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("node_uuid = ?", nodeUUID).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryOneByIDAndNodeUUID query one by id
func (s *SnowflakeWorkerRepo) QueryOneByIDAndNodeUUID(ctx context.Context, req *entities.SnowflakeWorker) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	dataModel = new(entities.SnowflakeWorker)
	err = s.dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", req.Id).
		Where("node_uuid = ?", req.NodeUuid).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryMaxNodeIDByInstanceID 查询实例的最大ID
func (s *SnowflakeWorkerRepo) QueryMaxNodeIDByInstanceID(ctx context.Context, instanceID string) (dataModels []*entities.InstanceMaxNodeID, err error) {
	err = s.dbConn.WithContext(ctx).
		Select("max(snowflake_node_id) as snowflake_node_id").
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("instance_id = ?", instanceID).
		Find(&dataModels).Error
	return
}

// QueryIdleNodeIDByInstanceID 查询实例的闲置ID
func (s *SnowflakeWorkerRepo) QueryIdleNodeIDByInstanceID(ctx context.Context, req *entities.InstanceIdleNodeIDReq) (dataModel *entities.InstanceMaxNodeID, isNotFound bool, err error) {
	dataModel = &entities.InstanceMaxNodeID{}
	err = s.dbConn.WithContext(ctx).
		Select("id, instance_id, snowflake_node_id, instance_extend_time").
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("instance_id = ?", req.InstanceId).
		Where("instance_extend_time <= ?", req.MaxInstanceExtendTime).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryMissingNodeIDByInstanceID 获取缺失的NodeID
func (s *SnowflakeWorkerRepo) QueryMissingNodeIDByInstanceID(ctx context.Context, req *entities.InstanceMissingNodeIDReq) (dataModels []*entities.InstanceMaxNodeID, err error) {

	return
}

// queryOneByConditions query one by conditions
func (s *SnowflakeWorkerRepo) queryOneByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	dataModel = new(entities.SnowflakeWorker)
	dbConn = dbConn.WithContext(ctx).Table(s.SnowflakeWorkerSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryOneByConditions query one by conditions
func (s *SnowflakeWorkerRepo) QueryOneByConditions(ctx context.Context, conditions map[string]interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, s.dbConn, conditions)
}

// QueryOneByConditionsWithDBConn query one by conditions
func (s *SnowflakeWorkerRepo) QueryOneByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *entities.SnowflakeWorker, isNotFound bool, err error) {
	return s.queryOneByConditions(ctx, dbConn, conditions)
}

// =============== query all : 查全部 ===============

// queryAllByConditions query all by conditions
func (s *SnowflakeWorkerRepo) queryAllByConditions(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) (dataModels []*entities.SnowflakeWorker, err error) {
	dbConn = dbConn.WithContext(ctx).Table(s.SnowflakeWorkerSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		Find(&dataModels).Error
	if err != nil {
		return dataModels, err
	}
	return
}

// QueryAllByConditions query all by conditions
func (s *SnowflakeWorkerRepo) QueryAllByConditions(ctx context.Context, conditions map[string]interface{}) ([]*entities.SnowflakeWorker, error) {
	return s.queryAllByConditions(ctx, s.dbConn, conditions)
}

// QueryAllByConditionsWithDBConn query all by conditions
func (s *SnowflakeWorkerRepo) QueryAllByConditionsWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}) ([]*entities.SnowflakeWorker, error) {
	return s.queryAllByConditions(ctx, dbConn, conditions)
}

// =============== list : 列表 ===============

// list 列表
func (s *SnowflakeWorkerRepo) list(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) (dataModels []*entities.SnowflakeWorker, recordCount int64, err error) {
	// query where
	dbConn = dbConn.WithContext(ctx).Table(s.SnowflakeWorkerSchema.TableName())
	dbConn = s.WhereConditions(dbConn, conditions)
	dbConn = gormutil.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormutil.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormutil.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		return
	}
	return
}

// List 列表
func (s *SnowflakeWorkerRepo) List(ctx context.Context, conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) ([]*entities.SnowflakeWorker, int64, error) {
	return s.list(ctx, s.dbConn, conditions, paginatorArgs)
}

// ListWithDBConn 列表
func (s *SnowflakeWorkerRepo) ListWithDBConn(ctx context.Context, dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) ([]*entities.SnowflakeWorker, int64, error) {
	return s.list(ctx, dbConn, conditions, paginatorArgs)
}

// =============== delete : 删除 ===============

// delete delete one
func (s *SnowflakeWorkerRepo) delete(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id = ?", dataModel.Id).
		Delete(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Delete delete one
func (s *SnowflakeWorkerRepo) Delete(ctx context.Context, dataModel *entities.SnowflakeWorker) error {
	return s.delete(ctx, s.dbConn, dataModel)
}

// DeleteWithDBConn delete one
func (s *SnowflakeWorkerRepo) DeleteWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *entities.SnowflakeWorker) error {
	return s.delete(ctx, dbConn, dataModel)
}

// deleteByIds delete by ids
func (s *SnowflakeWorkerRepo) deleteByIds(ctx context.Context, dbConn *gorm.DB, ids interface{}) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.SnowflakeWorkerSchema.TableName()).
		Where("id in (?)", ids).
		Delete(entities.SnowflakeWorker{}).Error
	if err != nil {
		return err
	}
	return
}

// DeleteByIds delete by ids
func (s *SnowflakeWorkerRepo) DeleteByIds(ctx context.Context, ids interface{}) error {
	return s.deleteByIds(ctx, s.dbConn, ids)
}

// DeleteByIdsWithDBConn delete by ids
func (s *SnowflakeWorkerRepo) DeleteByIdsWithDBConn(ctx context.Context, dbConn *gorm.DB, ids interface{}) error {
	return s.deleteByIds(ctx, dbConn, ids)
}

// =============== insert : 批量入库 ===============

var _ gormutil.BatchInsertRepo = new(SnowflakeWorkerSlice)

// SnowflakeWorkerSlice 表切片
type SnowflakeWorkerSlice []*entities.SnowflakeWorker

// TableName 表名
func (s *SnowflakeWorkerSlice) TableName() string {
	if len(*s) > 0 {
		return (*s)[0].TableName()
	}
	return (&entities.SnowflakeWorker{}).TableName()
}

// Len 长度
func (s *SnowflakeWorkerSlice) Len() int {
	return len(*s)
}

// InsertColumns 批量入库的列
func (s *SnowflakeWorkerSlice) InsertColumns() (columnList []string, placeholder string) {
	// columns
	columnList = []string{
		"instance_launch_time", "instance_extend_time", "instance_id", "snowflake_node_id", "instance_name", "instance_endpoint_list",
		"instance_metadata", "created_time",
	}

	// placeholders
	insertPlaceholderBytes := bytes.Repeat([]byte("?, "), len(columnList))
	insertPlaceholderBytes = bytes.TrimSuffix(insertPlaceholderBytes, []byte(", "))

	return columnList, string(insertPlaceholderBytes)
}

// InsertValues 批量入库的值
func (s *SnowflakeWorkerSlice) InsertValues(args *gormutil.BatchInsertValueArgs) (prepareData []interface{}, placeholderSlice []string) {
	dataModels := (*s)[args.StepStart:args.StepEnd]
	for index := range dataModels {
		// placeholder
		placeholderSlice = append(placeholderSlice, "("+args.InsertPlaceholder+")")

		// prepare data
		prepareData = append(prepareData, dataModels[index].InstanceLaunchTime)
		prepareData = append(prepareData, dataModels[index].InstanceExtendTime)
		prepareData = append(prepareData, dataModels[index].InstanceId)
		prepareData = append(prepareData, dataModels[index].SnowflakeNodeId)
		prepareData = append(prepareData, dataModels[index].InstanceName)
		prepareData = append(prepareData, dataModels[index].InstanceEndpointList)
		prepareData = append(prepareData, dataModels[index].InstanceMetadata)
		prepareData = append(prepareData, dataModels[index].CreatedTime)
	}
	return prepareData, placeholderSlice
}

// UpdateColumns 批量入库的列
func (s *SnowflakeWorkerSlice) UpdateColumns() (columnList []string) {
	// columns
	columnList = []string{
		"instance_launch_time=excluded.instance_launch_time", "instance_extend_time=excluded.instance_extend_time", "instance_id=excluded.instance_id",
		"snowflake_node_id=excluded.snowflake_node_id", "instance_name=excluded.instance_name", "instance_endpoint_list=excluded.instance_endpoint_list",
		"instance_metadata=excluded.instance_metadata", "created_time=excluded.created_time",
	}
	return columnList
}

// ConflictActionForMySQL 更新冲突时的操作
func (s *SnowflakeWorkerSlice) ConflictActionForMySQL() (req *gormutil.BatchInsertConflictActionReq) {
	req = &gormutil.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "AS excluded",
		OnConflictTarget:      "ON DUPLICATE KEY",
		OnConflictAction:      "UPDATE " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// ConflictActionForPostgres 更新冲突时的操作
func (s *SnowflakeWorkerSlice) ConflictActionForPostgres() (req *gormutil.BatchInsertConflictActionReq) {
	req = &gormutil.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "",
		OnConflictTarget:      "ON CONFLICT(id)",
		OnConflictAction:      "DO UPDATE SET " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// insert 批量插入
func (s *SnowflakeWorkerRepo) insert(ctx context.Context, dbConn *gorm.DB, dataModels SnowflakeWorkerSlice) error {
	return gormutil.BatchInsertWithContext(ctx, dbConn, &dataModels)
}

// Insert 批量插入
func (s *SnowflakeWorkerRepo) Insert(ctx context.Context, dataModels []*entities.SnowflakeWorker) error {
	return s.insert(ctx, s.dbConn, dataModels)
}

// InsertWithDBConn 批量插入
func (s *SnowflakeWorkerRepo) InsertWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModels []*entities.SnowflakeWorker) error {
	return s.insert(ctx, dbConn, dataModels)
}

// =============== conditions : 条件 ===============

// WhereConditions orm where
func (s *SnowflakeWorkerRepo) WhereConditions(dbConn *gorm.DB, conditions map[string]interface{}) *gorm.DB {

	// table name
	//tableName := s.SnowflakeWorkerSchema.TableName()

	// On-demand loading

	// id
	//if data, ok := conditions["id"]; ok {
	//	dbConn = dbConn.Where(tableName+".id = ?", data)
	//}

	// instance_launch_time
	//if data, ok := conditions["instance_launch_time"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_launch_time = ?", data)
	//}

	// instance_extend_time
	//if data, ok := conditions["instance_extend_time"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_extend_time = ?", data)
	//}

	// instance_id
	//if data, ok := conditions["instance_id"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_id = ?", data)
	//}

	// snowflake_node_id
	//if data, ok := conditions["snowflake_node_id"]; ok {
	//	dbConn = dbConn.Where(tableName+".snowflake_node_id = ?", data)
	//}

	// instance_name
	//if data, ok := conditions["instance_name"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_name = ?", data)
	//}

	// instance_endpoint_list
	//if data, ok := conditions["instance_endpoint_list"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_endpoint_list = ?", data)
	//}

	// instance_metadata
	//if data, ok := conditions["instance_metadata"]; ok {
	//	dbConn = dbConn.Where(tableName+".instance_metadata = ?", data)
	//}

	// created_time
	//if data, ok := conditions["created_time"]; ok {
	//	dbConn = dbConn.Where(tableName+".created_time = ?", data)
	//}

	return dbConn
}

// UpdateColumns update columns
func (s *SnowflakeWorkerRepo) UpdateColumns(conditions map[string]interface{}) map[string]interface{} {

	// update columns
	updateColumns := make(map[string]interface{})

	// On-demand loading

	// id
	//if data, ok := conditions["id"]; ok {
	//	updateColumns["id"] = data
	//}

	// instance_launch_time
	//if data, ok := conditions["instance_launch_time"]; ok {
	//	updateColumns["instance_launch_time"] = data
	//}

	// instance_extend_time
	//if data, ok := conditions["instance_extend_time"]; ok {
	//	updateColumns["instance_extend_time"] = data
	//}

	// instance_id
	//if data, ok := conditions["instance_id"]; ok {
	//	updateColumns["instance_id"] = data
	//}

	// snowflake_node_id
	//if data, ok := conditions["snowflake_node_id"]; ok {
	//	updateColumns["snowflake_node_id"] = data
	//}

	// instance_name
	//if data, ok := conditions["instance_name"]; ok {
	//	updateColumns["instance_name"] = data
	//}

	// instance_endpoint_list
	//if data, ok := conditions["instance_endpoint_list"]; ok {
	//	updateColumns["instance_endpoint_list"] = data
	//}

	// instance_metadata
	//if data, ok := conditions["instance_metadata"]; ok {
	//	updateColumns["instance_metadata"] = data
	//}

	// created_time
	//if data, ok := conditions["created_time"]; ok {
	//	updateColumns["created_time"] = data
	//}

	return updateColumns
}
